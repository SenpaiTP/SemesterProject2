
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d72  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c35  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000345  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000598  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	52 d0       	rcall	.+164    	; 0x19a <main>
  f6:	7d c0       	rjmp	.+250    	; 0x1f2 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <InitUART>:
#define XTAL 16000000
#define F_CPU 16000000UL

// Function to initialize UART with 8 data bits, no parity, and one stop bit.
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char Rx_Int)
{
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	52 2f       	mov	r21, r18
	if (BaudRate < 300 || BaudRate > 115200) {
 100:	8b 01       	movw	r16, r22
 102:	9c 01       	movw	r18, r24
 104:	0c 52       	subi	r16, 0x2C	; 44
 106:	11 40       	sbci	r17, 0x01	; 1
 108:	21 09       	sbc	r18, r1
 10a:	31 09       	sbc	r19, r1
 10c:	05 3d       	cpi	r16, 0xD5	; 213
 10e:	10 4c       	sbci	r17, 0xC0	; 192
 110:	21 40       	sbci	r18, 0x01	; 1
 112:	31 05       	cpc	r19, r1
 114:	18 f0       	brcs	.+6      	; 0x11c <InitUART+0x22>
		exit(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	6b d0       	rcall	.+214    	; 0x1f2 <_exit>
	}
	if (DataBit < 5 || DataBit > 8) {
 11c:	45 50       	subi	r20, 0x05	; 5
 11e:	44 30       	cpi	r20, 0x04	; 4
 120:	18 f0       	brcs	.+6      	; 0x128 <InitUART+0x2e>
		exit(0);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	65 d0       	rcall	.+202    	; 0x1f2 <_exit>
	}
	UCSR0C = (DataBit - 5)<<1;
 128:	44 0f       	add	r20, r20
 12a:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UCSR0B = 0b00011000;
 12e:	28 e1       	ldi	r18, 0x18	; 24
 130:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	if (Rx_Int) {
 134:	55 23       	and	r21, r21
 136:	29 f0       	breq	.+10     	; 0x142 <InitUART+0x48>
		UCSR0B = UCSR0B | 0b10000000; //Slår Interrupts til
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	20 81       	ld	r18, Z
 13e:	20 68       	ori	r18, 0x80	; 128
 140:	20 83       	st	Z, r18
	}
	UBRR0 = (16000000 / (16 * BaudRate)) - 1;
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	9c 01       	movw	r18, r24
 158:	ad 01       	movw	r20, r26
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	44 1f       	adc	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	44 1f       	adc	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	74 e2       	ldi	r23, 0x24	; 36
 16e:	84 ef       	ldi	r24, 0xF4	; 244
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	1d d0       	rcall	.+58     	; 0x1ae <__udivmodsi4>
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 17c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
}
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <sendChar>:

// Function to send a character via UART.
void sendChar(char data) {
	while (UCSR0A & (1 << UDRE0) == 0); // Wait for the data register to be empty
 186:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UDR0 = data; // Transmit the character
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 18e:	08 95       	ret

00000190 <receiveChar>:
}

// Function to receive a character via UART.
char receiveChar() {
	while (UCSR0A & (1 << RXC0) == 0); // Wait for data to be received
 190:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	return UDR0; // Return received data
 194:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 198:	08 95       	ret

0000019a <main>:

int main() {
	InitUART(9600, 8, 1); // Initialize UART
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	48 e0       	ldi	r20, 0x08	; 8
 19e:	60 e8       	ldi	r22, 0x80	; 128
 1a0:	75 e2       	ldi	r23, 0x25	; 37
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	a9 df       	rcall	.-174    	; 0xfa <InitUART>

	while (1) {
		char receivedChar = receiveChar(); // Receive a character
 1a8:	f3 df       	rcall	.-26     	; 0x190 <receiveChar>
		sendChar(receivedChar); // Send the received character back
 1aa:	ed df       	rcall	.-38     	; 0x186 <sendChar>
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0xe>

000001ae <__udivmodsi4>:
 1ae:	a1 e2       	ldi	r26, 0x21	; 33
 1b0:	1a 2e       	mov	r1, r26
 1b2:	aa 1b       	sub	r26, r26
 1b4:	bb 1b       	sub	r27, r27
 1b6:	fd 01       	movw	r30, r26
 1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <__udivmodsi4_ep>

000001ba <__udivmodsi4_loop>:
 1ba:	aa 1f       	adc	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	ee 1f       	adc	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	a2 17       	cp	r26, r18
 1c4:	b3 07       	cpc	r27, r19
 1c6:	e4 07       	cpc	r30, r20
 1c8:	f5 07       	cpc	r31, r21
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__udivmodsi4_ep>
 1cc:	a2 1b       	sub	r26, r18
 1ce:	b3 0b       	sbc	r27, r19
 1d0:	e4 0b       	sbc	r30, r20
 1d2:	f5 0b       	sbc	r31, r21

000001d4 <__udivmodsi4_ep>:
 1d4:	66 1f       	adc	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	88 1f       	adc	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	1a 94       	dec	r1
 1de:	69 f7       	brne	.-38     	; 0x1ba <__udivmodsi4_loop>
 1e0:	60 95       	com	r22
 1e2:	70 95       	com	r23
 1e4:	80 95       	com	r24
 1e6:	90 95       	com	r25
 1e8:	9b 01       	movw	r18, r22
 1ea:	ac 01       	movw	r20, r24
 1ec:	bd 01       	movw	r22, r26
 1ee:	cf 01       	movw	r24, r30
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
