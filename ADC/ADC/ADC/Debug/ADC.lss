
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000416  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d2  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ebe  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000711  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000691  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a0  00000000  00000000  00003739  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__vector_20>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	b2 c0       	rjmp	.+356    	; 0x1da <__vector_29>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e1       	ldi	r30, 0x16	; 22
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	95 d0       	rcall	.+298    	; 0x23a <main>
 110:	80 c1       	rjmp	.+768    	; 0x412 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <Init_ADC>:
// Target CPU frequency
#define XTAL 16000000

void Init_ADC()
{
	PORTF = 0b11111111;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 bb       	out	0x11, r24	; 17
	ADCSRA = 0b10101111; // Så skal prescalar sættes
 118:	8f ea       	ldi	r24, 0xAF	; 175
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADCSRB = 0b00000110;
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	ADMUX = 0b01000001;
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 12a:	08 95       	ret

0000012c <Init_Timer1>:
void Init_Timer1()
{
	// 16000000 Hz /64 = 250 kHz
	// Therefore we have 250000 "steps" per second
	// - and want 0,25 seconds until next overflow
	TCNT1 = 65536-62500;
 12c:	8c ed       	ldi	r24, 0xDC	; 220
 12e:	9b e0       	ldi	r25, 0x0B	; 11
 130:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 134:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	// Timer 1 in Normal Mode and PS = 64
	TCCR1A = 0b00000000;
 138:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000011;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	// Enable Timer 1 overflow interrupts
	TIMSK1 |= 0b00000001;
 142:	ef e6       	ldi	r30, 0x6F	; 111
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <initLEDport>:
  if (led_nr <= MAX_LED_NR)
  {
	// Dan (inverteret) maske på basis af parameteren (led_nr)
    mask = ~(0b00000001 << led_nr);
    // Sluk den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB & mask;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
 152:	15 b8       	out	0x05, r1	; 5
 154:	08 95       	ret

00000156 <toggleLED>:
void toggleLED(unsigned char led_nr)
{
  // Lokal variabel
  unsigned char mask;
  // Vi skal kun lave noget, hvis led_nr < 8
  if (led_nr <= MAX_LED_NR)
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	60 f4       	brcc	.+24     	; 0x172 <toggleLED+0x1c>
  {
    // Dan maske på basis af parameteren (led_nr)
    mask = 0b00000001 << led_nr;
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <toggleLED+0x10>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <toggleLED+0xc>
 16a:	ca 01       	movw	r24, r20
    // Toggle den aktuelle lysdiode (de andre ændres ikke)
    PORTB = PINB ^ mask;
 16c:	93 b1       	in	r25, 0x03	; 3
 16e:	89 27       	eor	r24, r25
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <__vector_20>:
	SendChar(ADCW);
}
*/

ISR(TIMER1_OVF_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	0b b6       	in	r0, 0x3b	; 59
 180:	0f 92       	push	r0
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	//Reload Timer 1: 0,25 seconds to next overflow
	SendChar('d');
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	b7 d0       	rcall	.+366    	; 0x30c <SendChar>
	TCNT1 = 65536-62500;
 19e:	8c ed       	ldi	r24, 0xDC	; 220
 1a0:	9b e0       	ldi	r25, 0x0B	; 11
 1a2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1a6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	toggleLED(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	d4 df       	rcall	.-88     	; 0x156 <toggleLED>
	TIFR1 |= 0b00000001;
 1ae:	86 b3       	in	r24, 0x16	; 22
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	86 bb       	out	0x16, r24	; 22
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0b be       	out	0x3b, r0	; 59
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_29>:


ISR(ADC_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	0b b6       	in	r0, 0x3b	; 59
 1e6:	0f 92       	push	r0
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	// Send ADC result to terminal
	SendString ("ADC0 = ");
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	8a d0       	rcall	.+276    	; 0x31a <SendString>
	SendInteger(ADCW);
 206:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 20a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 20e:	91 d0       	rcall	.+290    	; 0x332 <SendInteger>
	SendChar('\r');
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	7c d0       	rcall	.+248    	; 0x30c <SendChar>
 214:	ff 91       	pop	r31
}
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0b be       	out	0x3b, r0	; 59
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:
 23a:	21 e0       	ldi	r18, 0x01	; 1



int main(void)
{
	InitUART(9600, 8, 1);
 23c:	48 e0       	ldi	r20, 0x08	; 8
 23e:	60 e8       	ldi	r22, 0x80	; 128
 240:	75 e2       	ldi	r23, 0x25	; 37
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e d0       	rcall	.+28     	; 0x264 <InitUART>
	Init_ADC();
 248:	65 df       	rcall	.-310    	; 0x114 <Init_ADC>
	Init_Timer1();
 24a:	70 df       	rcall	.-288    	; 0x12c <Init_Timer1>
	initLEDport();
 24c:	80 df       	rcall	.-256    	; 0x14e <initLEDport>
    /* Replace with your application code */
    
	while (1) 
    {
		SendChar(' ');
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	5d d0       	rcall	.+186    	; 0x30c <SendChar>
 252:	56 d0       	rcall	.+172    	; 0x300 <ReadChar>
		char input = ReadChar();
 254:	88 23       	and	r24, r24
 256:	d9 f3       	breq	.-10     	; 0x24e <main+0x14>
		if (input) {
 258:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
			SendInteger(ADCW);
 25c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 260:	68 d0       	rcall	.+208    	; 0x332 <SendInteger>
 262:	f5 cf       	rjmp	.-22     	; 0x24e <main+0x14>

00000264 <InitUART>:
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
    No interrupts enabled.
    Number of Stop Bits = 1.
    No Parity.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, unsigned char Rx_Int)
{
 268:	52 2f       	mov	r21, r18
	if (BaudRate < 300 || BaudRate > 115200) {
 26a:	8b 01       	movw	r16, r22
 26c:	9c 01       	movw	r18, r24
 26e:	0c 52       	subi	r16, 0x2C	; 44
 270:	11 40       	sbci	r17, 0x01	; 1
 272:	21 09       	sbc	r18, r1
 274:	31 09       	sbc	r19, r1
 276:	05 3d       	cpi	r16, 0xD5	; 213
 278:	10 4c       	sbci	r17, 0xC0	; 192
 27a:	21 40       	sbci	r18, 0x01	; 1
 27c:	31 05       	cpc	r19, r1
 27e:	18 f0       	brcs	.+6      	; 0x286 <InitUART+0x22>
		exit(0);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	c6 d0       	rcall	.+396    	; 0x412 <_exit>
	}
	if (DataBit < 5 || DataBit > 8) {
 286:	45 50       	subi	r20, 0x05	; 5
 288:	44 30       	cpi	r20, 0x04	; 4
 28a:	18 f0       	brcs	.+6      	; 0x292 <InitUART+0x2e>
		exit(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	c0 d0       	rcall	.+384    	; 0x412 <_exit>
	}
	UCSR0C = (DataBit - 5)<<1;
 292:	44 0f       	add	r20, r20
 294:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	UCSR0B = 0b00011000;
 298:	28 e1       	ldi	r18, 0x18	; 24
 29a:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	if (Rx_Int) {
 29e:	55 23       	and	r21, r21
 2a0:	29 f0       	breq	.+10     	; 0x2ac <InitUART+0x48>
		UCSR0B = UCSR0B | 0b10000000; //Slår Interrupts til
 2a2:	e1 ec       	ldi	r30, 0xC1	; 193
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	20 81       	ld	r18, Z
 2a8:	20 68       	ori	r18, 0x80	; 128
 2aa:	20 83       	st	Z, r18
	}
	UBRR0 = (16000000 / (16 * BaudRate)) - 1;
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	aa 1f       	adc	r26, r26
 2b6:	bb 1f       	adc	r27, r27
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	9c 01       	movw	r18, r24
 2c2:	ad 01       	movw	r20, r26
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	44 1f       	adc	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	44 1f       	adc	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	74 e2       	ldi	r23, 0x24	; 36
 2d8:	84 ef       	ldi	r24, 0xF4	; 244
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	45 d0       	rcall	.+138    	; 0x368 <__udivmodsi4>
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	31 09       	sbc	r19, r1
 2e2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 2e6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
}
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <CharReady>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   if (UCSR0A & 0b10000000) {
 2f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2f4:	88 23       	and	r24, r24
 2f6:	14 f4       	brge	.+4      	; 0x2fc <CharReady+0xc>
	   return 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	08 95       	ret
   } else {
	   return 0;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
   }
}
 2fe:	08 95       	ret

00000300 <ReadChar>:
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar()
{
   while (!CharReady()) {
 300:	f7 df       	rcall	.-18     	; 0x2f0 <CharReady>
 302:	88 23       	and	r24, r24
 304:	e9 f3       	breq	.-6      	; 0x300 <ReadChar>
   }
   return UDR0;
 306:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 30a:	08 95       	ret

0000030c <SendChar>:
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
   while ( (UCSR0A & 0b00100000) == 0) {
 30c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 310:	95 ff       	sbrs	r25, 5
 312:	fc cf       	rjmp	.-8      	; 0x30c <SendChar>
	   
   }
   UDR0 = Tegn;
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 318:	08 95       	ret

0000031a <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
   while (*Streng != 0) {
 320:	02 c0       	rjmp	.+4      	; 0x326 <SendString+0xc>
	   SendChar(*Streng);
 322:	f4 df       	rcall	.-24     	; 0x30c <SendChar>
	   Streng++;
 324:	21 96       	adiw	r28, 0x01	; 1
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
   while (*Streng != 0) {
 326:	88 81       	ld	r24, Y
 328:	81 11       	cpse	r24, r1
 32a:	fb cf       	rjmp	.-10     	; 0x322 <SendString+0x8>
	   SendChar(*Streng);
	   Streng++;
   }
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	27 97       	sbiw	r28, 0x07	; 7
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 346:	4a e0       	ldi	r20, 0x0A	; 10
 348:	be 01       	movw	r22, r28
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	2e d0       	rcall	.+92     	; 0x3ac <__itoa_ncheck>
   char talString[7];
   itoa(Tal, talString, 10);
   SendString(talString);
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	e2 df       	rcall	.-60     	; 0x31a <SendString>
}
 356:	27 96       	adiw	r28, 0x07	; 7
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <__udivmodsi4>:
 368:	a1 e2       	ldi	r26, 0x21	; 33
 36a:	1a 2e       	mov	r1, r26
 36c:	aa 1b       	sub	r26, r26
 36e:	bb 1b       	sub	r27, r27
 370:	fd 01       	movw	r30, r26
 372:	0d c0       	rjmp	.+26     	; 0x38e <__udivmodsi4_ep>

00000374 <__udivmodsi4_loop>:
 374:	aa 1f       	adc	r26, r26
 376:	bb 1f       	adc	r27, r27
 378:	ee 1f       	adc	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	a2 17       	cp	r26, r18
 37e:	b3 07       	cpc	r27, r19
 380:	e4 07       	cpc	r30, r20
 382:	f5 07       	cpc	r31, r21
 384:	20 f0       	brcs	.+8      	; 0x38e <__udivmodsi4_ep>
 386:	a2 1b       	sub	r26, r18
 388:	b3 0b       	sbc	r27, r19
 38a:	e4 0b       	sbc	r30, r20
 38c:	f5 0b       	sbc	r31, r21

0000038e <__udivmodsi4_ep>:
 38e:	66 1f       	adc	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	1a 94       	dec	r1
 398:	69 f7       	brne	.-38     	; 0x374 <__udivmodsi4_loop>
 39a:	60 95       	com	r22
 39c:	70 95       	com	r23
 39e:	80 95       	com	r24
 3a0:	90 95       	com	r25
 3a2:	9b 01       	movw	r18, r22
 3a4:	ac 01       	movw	r20, r24
 3a6:	bd 01       	movw	r22, r26
 3a8:	cf 01       	movw	r24, r30
 3aa:	08 95       	ret

000003ac <__itoa_ncheck>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	4a 30       	cpi	r20, 0x0A	; 10
 3b0:	31 f4       	brne	.+12     	; 0x3be <__itoa_ncheck+0x12>
 3b2:	99 23       	and	r25, r25
 3b4:	22 f4       	brpl	.+8      	; 0x3be <__itoa_ncheck+0x12>
 3b6:	bd e2       	ldi	r27, 0x2D	; 45
 3b8:	90 95       	com	r25
 3ba:	81 95       	neg	r24
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <__utoa_common>

000003c0 <__utoa_ncheck>:
 3c0:	bb 27       	eor	r27, r27

000003c2 <__utoa_common>:
 3c2:	fb 01       	movw	r30, r22
 3c4:	55 27       	eor	r21, r21
 3c6:	aa 27       	eor	r26, r26
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	aa 1f       	adc	r26, r26
 3ce:	a4 17       	cp	r26, r20
 3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__utoa_common+0x14>
 3d2:	a4 1b       	sub	r26, r20
 3d4:	83 95       	inc	r24
 3d6:	50 51       	subi	r21, 0x10	; 16
 3d8:	b9 f7       	brne	.-18     	; 0x3c8 <__utoa_common+0x6>
 3da:	a0 5d       	subi	r26, 0xD0	; 208
 3dc:	aa 33       	cpi	r26, 0x3A	; 58
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <__utoa_common+0x20>
 3e0:	a9 5d       	subi	r26, 0xD9	; 217
 3e2:	a1 93       	st	Z+, r26
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	79 f7       	brne	.-34     	; 0x3c6 <__utoa_common+0x4>
 3e8:	b1 11       	cpse	r27, r1
 3ea:	b1 93       	st	Z+, r27
 3ec:	11 92       	st	Z+, r1
 3ee:	cb 01       	movw	r24, r22
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <strrev>

000003f2 <strrev>:
 3f2:	dc 01       	movw	r26, r24
 3f4:	fc 01       	movw	r30, r24
 3f6:	67 2f       	mov	r22, r23
 3f8:	71 91       	ld	r23, Z+
 3fa:	77 23       	and	r23, r23
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <strrev+0x4>
 3fe:	32 97       	sbiw	r30, 0x02	; 2
 400:	04 c0       	rjmp	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 402:	7c 91       	ld	r23, X
 404:	6d 93       	st	X+, r22
 406:	70 83       	st	Z, r23
 408:	62 91       	ld	r22, -Z
 40a:	ae 17       	cp	r26, r30
 40c:	bf 07       	cpc	r27, r31
 40e:	c8 f3       	brcs	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
